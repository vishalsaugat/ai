// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`multiple stream consumption > should support text stream, ai stream, full stream on single result object 1`] = `
{
  "dataStream": [
    "0:"Hello"
",
    "0:", "
",
    "0:"world!"
",
    "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
    "d:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10}}
",
  ],
  "fullStream": [
    {
      "textDelta": "Hello",
      "type": "text-delta",
    },
    {
      "textDelta": ", ",
      "type": "text-delta",
    },
    {
      "textDelta": "world!",
      "type": "text-delta",
    },
    {
      "experimental_providerMetadata": undefined,
      "finishReason": "stop",
      "isContinued": false,
      "logprobs": undefined,
      "response": {
        "id": "id-0",
        "modelId": "mock-model-id",
        "timestamp": 1970-01-01T00:00:00.000Z,
      },
      "type": "step-finish",
      "usage": {
        "completionTokens": 10,
        "promptTokens": 3,
        "totalTokens": 13,
      },
    },
    {
      "experimental_providerMetadata": undefined,
      "finishReason": "stop",
      "logprobs": undefined,
      "response": {
        "id": "id-0",
        "modelId": "mock-model-id",
        "timestamp": 1970-01-01T00:00:00.000Z,
      },
      "type": "finish",
      "usage": {
        "completionTokens": 10,
        "promptTokens": 3,
        "totalTokens": 13,
      },
    },
  ],
  "textStream": [
    "Hello",
    ", ",
    "world!",
  ],
}
`;

exports[`options.maxSteps > 2 steps: initial, tool-result > callbacks > onFinish should send correct information 1`] = `
{
  "experimental_providerMetadata": undefined,
  "finishReason": "stop",
  "logprobs": undefined,
  "rawResponse": undefined,
  "response": {
    "headers": undefined,
    "id": "id-1",
    "modelId": "mock-model-id",
    "timestamp": 1970-01-01T00:00:01.000Z,
  },
  "responseMessages": [
    {
      "content": [
        {
          "text": "",
          "type": "text",
        },
        {
          "args": {
            "value": "value",
          },
          "toolCallId": "call-1",
          "toolName": "tool1",
          "type": "tool-call",
        },
      ],
      "role": "assistant",
    },
    {
      "content": [
        {
          "result": "result1",
          "toolCallId": "call-1",
          "toolName": "tool1",
          "type": "tool-result",
        },
      ],
      "role": "tool",
    },
    {
      "content": [
        {
          "text": "Hello, world!",
          "type": "text",
        },
      ],
      "role": "assistant",
    },
  ],
  "steps": [
    {
      "experimental_providerMetadata": undefined,
      "finishReason": "tool-calls",
      "isContinued": false,
      "logprobs": undefined,
      "rawResponse": undefined,
      "response": {
        "id": "id-0",
        "modelId": "mock-model-id",
        "timestamp": 1970-01-01T00:00:00.000Z,
      },
      "stepType": "initial",
      "text": "",
      "toolCalls": [
        {
          "args": {
            "value": "value",
          },
          "toolCallId": "call-1",
          "toolName": "tool1",
          "type": "tool-call",
        },
      ],
      "toolResults": [
        {
          "args": {
            "value": "value",
          },
          "result": "result1",
          "toolCallId": "call-1",
          "toolName": "tool1",
          "type": "tool-result",
        },
      ],
      "usage": {
        "completionTokens": 10,
        "promptTokens": 3,
        "totalTokens": 13,
      },
      "warnings": undefined,
    },
    {
      "experimental_providerMetadata": undefined,
      "finishReason": "stop",
      "isContinued": false,
      "logprobs": undefined,
      "rawResponse": {
        "headers": {
          "call": "2",
        },
      },
      "response": {
        "id": "id-1",
        "modelId": "mock-model-id",
        "timestamp": 1970-01-01T00:00:01.000Z,
      },
      "stepType": "tool-result",
      "text": "Hello, world!",
      "toolCalls": [],
      "toolResults": [],
      "usage": {
        "completionTokens": 5,
        "promptTokens": 1,
        "totalTokens": 6,
      },
      "warnings": undefined,
    },
  ],
  "text": "Hello, world!",
  "toolCalls": [],
  "toolResults": [],
  "usage": {
    "completionTokens": 15,
    "promptTokens": 4,
    "totalTokens": 19,
  },
  "warnings": undefined,
}
`;

exports[`options.maxSteps > 2 steps: initial, tool-result > callbacks > onStepFinish should send correct information 1`] = `
[
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "tool-calls",
    "isContinued": false,
    "logprobs": undefined,
    "rawResponse": undefined,
    "response": {
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "stepType": "initial",
    "text": "",
    "toolCalls": [
      {
        "args": {
          "value": "value",
        },
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-call",
      },
    ],
    "toolResults": [
      {
        "args": {
          "value": "value",
        },
        "result": "result1",
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-result",
      },
    ],
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "rawResponse": {
      "headers": {
        "call": "2",
      },
    },
    "response": {
      "id": "id-1",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:01.000Z,
    },
    "stepType": "tool-result",
    "text": "Hello, world!",
    "toolCalls": [],
    "toolResults": [],
    "usage": {
      "completionTokens": 5,
      "promptTokens": 1,
      "totalTokens": 6,
    },
    "warnings": undefined,
  },
]
`;

exports[`options.maxSteps > 2 steps: initial, tool-result > should contain assistant response message and tool message from all steps 1`] = `
[
  {
    "args": {
      "value": "value",
    },
    "toolCallId": "call-1",
    "toolName": "tool1",
    "type": "tool-call",
  },
  {
    "args": {
      "value": "value",
    },
    "result": "result1",
    "toolCallId": "call-1",
    "toolName": "tool1",
    "type": "tool-result",
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "tool-calls",
    "isContinued": false,
    "logprobs": undefined,
    "response": {
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
  },
  {
    "textDelta": "Hello, ",
    "type": "text-delta",
  },
  {
    "textDelta": "world!",
    "type": "text-delta",
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "response": {
      "id": "id-1",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:01.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 5,
      "promptTokens": 1,
      "totalTokens": 6,
    },
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "logprobs": undefined,
    "response": {
      "id": "id-1",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:01.000Z,
    },
    "type": "finish",
    "usage": {
      "completionTokens": 15,
      "promptTokens": 4,
      "totalTokens": 19,
    },
  },
]
`;

exports[`options.maxSteps > 2 steps: initial, tool-result > should record telemetry data for each step 1`] = `
[
  {
    "attributes": {
      "ai.finishReason": "stop",
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.streamText",
      "ai.prompt": "{"prompt":"test-input"}",
      "ai.response.finishReason": "stop",
      "ai.response.text": "Hello, world!",
      "ai.result.text": "Hello, world!",
      "ai.settings.maxSteps": 3,
      "ai.usage.completionTokens": 15,
      "ai.usage.promptTokens": 4,
      "operation.name": "ai.streamText",
    },
    "events": [],
    "name": "ai.streamText",
  },
  {
    "attributes": {
      "ai.finishReason": "tool-calls",
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.streamText.doStream",
      "ai.prompt.format": "prompt",
      "ai.prompt.messages": "[{"role":"user","content":[{"type":"text","text":"test-input"}]}]",
      "ai.response.avgCompletionTokensPerSecond": 20,
      "ai.response.finishReason": "tool-calls",
      "ai.response.id": "id-0",
      "ai.response.model": "mock-model-id",
      "ai.response.msToFinish": 500,
      "ai.response.msToFirstChunk": 100,
      "ai.response.text": "",
      "ai.response.timestamp": "1970-01-01T00:00:00.000Z",
      "ai.response.toolCalls": "[{"type":"tool-call","toolCallId":"call-1","toolName":"tool1","args":{"value":"value"}}]",
      "ai.result.text": "",
      "ai.result.toolCalls": "[{"type":"tool-call","toolCallId":"call-1","toolName":"tool1","args":{"value":"value"}}]",
      "ai.stream.msToFirstChunk": 100,
      "ai.usage.completionTokens": 10,
      "ai.usage.promptTokens": 3,
      "gen_ai.request.model": "mock-model-id",
      "gen_ai.response.finish_reasons": [
        "tool-calls",
      ],
      "gen_ai.response.id": "id-0",
      "gen_ai.response.model": "mock-model-id",
      "gen_ai.system": "mock-provider",
      "gen_ai.usage.input_tokens": 3,
      "gen_ai.usage.output_tokens": 10,
      "operation.name": "ai.streamText.doStream",
    },
    "events": [
      {
        "attributes": {
          "ai.response.msToFirstChunk": 100,
          "ai.stream.msToFirstChunk": 100,
        },
        "name": "ai.stream.firstChunk",
      },
      {
        "attributes": undefined,
        "name": "ai.stream.finish",
      },
    ],
    "name": "ai.streamText.doStream",
  },
  {
    "attributes": {
      "ai.operationId": "ai.toolCall",
      "ai.toolCall.args": "{"value":"value"}",
      "ai.toolCall.id": "call-1",
      "ai.toolCall.name": "tool1",
      "ai.toolCall.result": ""result1"",
      "operation.name": "ai.toolCall",
    },
    "events": [],
    "name": "ai.toolCall",
  },
  {
    "attributes": {
      "ai.finishReason": "stop",
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.streamText.doStream",
      "ai.prompt.format": "messages",
      "ai.prompt.messages": "[{"role":"user","content":[{"type":"text","text":"test-input"}]},{"role":"assistant","content":[{"type":"tool-call","toolCallId":"call-1","toolName":"tool1","args":{"value":"value"}}]},{"role":"tool","content":[{"type":"tool-result","toolCallId":"call-1","toolName":"tool1","result":"result1"}]}]",
      "ai.response.avgCompletionTokensPerSecond": 12.5,
      "ai.response.finishReason": "stop",
      "ai.response.id": "id-1",
      "ai.response.model": "mock-model-id",
      "ai.response.msToFinish": 400,
      "ai.response.msToFirstChunk": 400,
      "ai.response.text": "Hello, world!",
      "ai.response.timestamp": "1970-01-01T00:00:01.000Z",
      "ai.result.text": "Hello, world!",
      "ai.stream.msToFirstChunk": 400,
      "ai.usage.completionTokens": 5,
      "ai.usage.promptTokens": 1,
      "gen_ai.request.model": "mock-model-id",
      "gen_ai.response.finish_reasons": [
        "stop",
      ],
      "gen_ai.response.id": "id-1",
      "gen_ai.response.model": "mock-model-id",
      "gen_ai.system": "mock-provider",
      "gen_ai.usage.input_tokens": 1,
      "gen_ai.usage.output_tokens": 5,
      "operation.name": "ai.streamText.doStream",
    },
    "events": [
      {
        "attributes": {
          "ai.response.msToFirstChunk": 400,
          "ai.stream.msToFirstChunk": 400,
        },
        "name": "ai.stream.firstChunk",
      },
      {
        "attributes": undefined,
        "name": "ai.stream.finish",
      },
    ],
    "name": "ai.streamText.doStream",
  },
]
`;

exports[`options.maxSteps > 2 steps: initial, tool-result > value promises > result.responseMessages should contain response messages from all steps 1`] = `
[
  {
    "content": [
      {
        "text": "",
        "type": "text",
      },
      {
        "args": {
          "value": "value",
        },
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-call",
      },
    ],
    "role": "assistant",
  },
  {
    "content": [
      {
        "result": "result1",
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-result",
      },
    ],
    "role": "tool",
  },
  {
    "content": [
      {
        "text": "Hello, world!",
        "type": "text",
      },
    ],
    "role": "assistant",
  },
]
`;

exports[`options.maxSteps > 2 steps: initial, tool-result > value promises > result.steps should contain all steps 1`] = `
[
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "tool-calls",
    "isContinued": false,
    "logprobs": undefined,
    "rawResponse": undefined,
    "response": {
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "stepType": "initial",
    "text": "",
    "toolCalls": [
      {
        "args": {
          "value": "value",
        },
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-call",
      },
    ],
    "toolResults": [
      {
        "args": {
          "value": "value",
        },
        "result": "result1",
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-result",
      },
    ],
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "rawResponse": {
      "headers": {
        "call": "2",
      },
    },
    "response": {
      "id": "id-1",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:01.000Z,
    },
    "stepType": "tool-result",
    "text": "Hello, world!",
    "toolCalls": [],
    "toolResults": [],
    "usage": {
      "completionTokens": 5,
      "promptTokens": 1,
      "totalTokens": 6,
    },
    "warnings": undefined,
  },
]
`;

exports[`options.maxSteps > 3 steps: initial, continue, continue > callbacks > onFinish should send correct information 1`] = `
{
  "experimental_providerMetadata": undefined,
  "finishReason": "stop",
  "logprobs": undefined,
  "rawResponse": undefined,
  "response": {
    "headers": undefined,
    "id": "id-1",
    "modelId": "mock-model-id",
    "timestamp": 1970-01-01T00:00:01.000Z,
  },
  "responseMessages": [
    {
      "content": [
        {
          "text": "part 1 
 ",
          "type": "text",
        },
        {
          "text": "no-whitespace",
          "type": "text",
        },
        {
          "text": "final value keep all whitespace
 end",
          "type": "text",
        },
      ],
      "role": "assistant",
    },
  ],
  "steps": [
    {
      "experimental_providerMetadata": undefined,
      "finishReason": "length",
      "isContinued": true,
      "logprobs": undefined,
      "rawResponse": undefined,
      "response": {
        "id": "id-0",
        "modelId": "mock-model-id",
        "timestamp": 1970-01-01T00:00:00.000Z,
      },
      "stepType": "initial",
      "text": "part 1 
 ",
      "toolCalls": [],
      "toolResults": [],
      "usage": {
        "completionTokens": 20,
        "promptTokens": 10,
        "totalTokens": 30,
      },
      "warnings": undefined,
    },
    {
      "experimental_providerMetadata": undefined,
      "finishReason": "length",
      "isContinued": true,
      "logprobs": undefined,
      "rawResponse": undefined,
      "response": {
        "id": "id-1",
        "modelId": "mock-model-id",
        "timestamp": 1970-01-01T00:00:01.000Z,
      },
      "stepType": "continue",
      "text": "no-whitespace",
      "toolCalls": [],
      "toolResults": [],
      "usage": {
        "completionTokens": 5,
        "promptTokens": 30,
        "totalTokens": 35,
      },
      "warnings": undefined,
    },
    {
      "experimental_providerMetadata": undefined,
      "finishReason": "stop",
      "isContinued": false,
      "logprobs": undefined,
      "rawResponse": {
        "headers": {
          "call": "3",
        },
      },
      "response": {
        "id": "id-1",
        "modelId": "mock-model-id",
        "timestamp": 1970-01-01T00:00:01.000Z,
      },
      "stepType": "continue",
      "text": "final value keep all whitespace
 end",
      "toolCalls": [],
      "toolResults": [],
      "usage": {
        "completionTokens": 2,
        "promptTokens": 3,
        "totalTokens": 5,
      },
      "warnings": undefined,
    },
  ],
  "text": "part 1 
 no-whitespacefinal value keep all whitespace
 end",
  "toolCalls": [],
  "toolResults": [],
  "usage": {
    "completionTokens": 27,
    "promptTokens": 43,
    "totalTokens": 70,
  },
  "warnings": undefined,
}
`;

exports[`options.maxSteps > 3 steps: initial, continue, continue > callbacks > onStepFinish should send correct information 1`] = `
[
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "length",
    "isContinued": true,
    "logprobs": undefined,
    "rawResponse": undefined,
    "response": {
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "stepType": "initial",
    "text": "part 1 
 ",
    "toolCalls": [],
    "toolResults": [],
    "usage": {
      "completionTokens": 20,
      "promptTokens": 10,
      "totalTokens": 30,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "length",
    "isContinued": true,
    "logprobs": undefined,
    "rawResponse": undefined,
    "response": {
      "id": "id-1",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:01.000Z,
    },
    "stepType": "continue",
    "text": "no-whitespace",
    "toolCalls": [],
    "toolResults": [],
    "usage": {
      "completionTokens": 5,
      "promptTokens": 30,
      "totalTokens": 35,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "rawResponse": {
      "headers": {
        "call": "3",
      },
    },
    "response": {
      "id": "id-1",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:01.000Z,
    },
    "stepType": "continue",
    "text": "final value keep all whitespace
 end",
    "toolCalls": [],
    "toolResults": [],
    "usage": {
      "completionTokens": 2,
      "promptTokens": 3,
      "totalTokens": 5,
    },
    "warnings": undefined,
  },
]
`;

exports[`options.maxSteps > 3 steps: initial, continue, continue > should generate correct data stream 1`] = `
[
  "0:"part "
",
  "0:"1 \\n"
",
  "0:" "
",
  "e:{"finishReason":"length","usage":{"promptTokens":10,"completionTokens":20},"isContinued":true}
",
  "0:"no-whitespace"
",
  "e:{"finishReason":"length","usage":{"promptTokens":30,"completionTokens":5},"isContinued":true}
",
  "0:"final "
",
  "0:"value keep all "
",
  "0:"whitespace\\n "
",
  "0:"end"
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":2},"isContinued":false}
",
  "d:{"finishReason":"stop","usage":{"promptTokens":43,"completionTokens":27}}
",
]
`;

exports[`options.maxSteps > 3 steps: initial, continue, continue > should record telemetry data for each step 1`] = `
[
  {
    "attributes": {
      "ai.finishReason": "stop",
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.streamText",
      "ai.prompt": "{"prompt":"test-input"}",
      "ai.response.finishReason": "stop",
      "ai.response.text": "part 1 
 no-whitespacefinal value keep all whitespace
 end",
      "ai.result.text": "part 1 
 no-whitespacefinal value keep all whitespace
 end",
      "ai.settings.maxSteps": 5,
      "ai.usage.completionTokens": 27,
      "ai.usage.promptTokens": 43,
      "operation.name": "ai.streamText",
    },
    "events": [],
    "name": "ai.streamText",
  },
  {
    "attributes": {
      "ai.finishReason": "length",
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.streamText.doStream",
      "ai.prompt.format": "prompt",
      "ai.prompt.messages": "[{"role":"user","content":[{"type":"text","text":"test-input"}]}]",
      "ai.response.avgCompletionTokensPerSecond": 40,
      "ai.response.finishReason": "length",
      "ai.response.id": "id-0",
      "ai.response.model": "mock-model-id",
      "ai.response.msToFinish": 500,
      "ai.response.msToFirstChunk": 100,
      "ai.response.text": "part 1 
 ",
      "ai.response.timestamp": "1970-01-01T00:00:00.000Z",
      "ai.result.text": "part 1 
 ",
      "ai.stream.msToFirstChunk": 100,
      "ai.usage.completionTokens": 20,
      "ai.usage.promptTokens": 10,
      "gen_ai.request.model": "mock-model-id",
      "gen_ai.response.finish_reasons": [
        "length",
      ],
      "gen_ai.response.id": "id-0",
      "gen_ai.response.model": "mock-model-id",
      "gen_ai.system": "mock-provider",
      "gen_ai.usage.input_tokens": 10,
      "gen_ai.usage.output_tokens": 20,
      "operation.name": "ai.streamText.doStream",
    },
    "events": [
      {
        "attributes": {
          "ai.response.msToFirstChunk": 100,
          "ai.stream.msToFirstChunk": 100,
        },
        "name": "ai.stream.firstChunk",
      },
      {
        "attributes": undefined,
        "name": "ai.stream.finish",
      },
    ],
    "name": "ai.streamText.doStream",
  },
  {
    "attributes": {
      "ai.finishReason": "length",
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.streamText.doStream",
      "ai.prompt.format": "messages",
      "ai.prompt.messages": "[{"role":"user","content":[{"type":"text","text":"test-input"}]},{"role":"assistant","content":[{"type":"text","text":"part 1 \\n "}]}]",
      "ai.response.avgCompletionTokensPerSecond": 12.5,
      "ai.response.finishReason": "length",
      "ai.response.id": "id-1",
      "ai.response.model": "mock-model-id",
      "ai.response.msToFinish": 400,
      "ai.response.msToFirstChunk": 400,
      "ai.response.text": "no-whitespace",
      "ai.response.timestamp": "1970-01-01T00:00:01.000Z",
      "ai.result.text": "no-whitespace",
      "ai.stream.msToFirstChunk": 400,
      "ai.usage.completionTokens": 5,
      "ai.usage.promptTokens": 30,
      "gen_ai.request.model": "mock-model-id",
      "gen_ai.response.finish_reasons": [
        "length",
      ],
      "gen_ai.response.id": "id-1",
      "gen_ai.response.model": "mock-model-id",
      "gen_ai.system": "mock-provider",
      "gen_ai.usage.input_tokens": 30,
      "gen_ai.usage.output_tokens": 5,
      "operation.name": "ai.streamText.doStream",
    },
    "events": [
      {
        "attributes": {
          "ai.response.msToFirstChunk": 400,
          "ai.stream.msToFirstChunk": 400,
        },
        "name": "ai.stream.firstChunk",
      },
      {
        "attributes": undefined,
        "name": "ai.stream.finish",
      },
    ],
    "name": "ai.streamText.doStream",
  },
  {
    "attributes": {
      "ai.finishReason": "stop",
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.streamText.doStream",
      "ai.prompt.format": "messages",
      "ai.prompt.messages": "[{"role":"user","content":[{"type":"text","text":"test-input"}]},{"role":"assistant","content":[{"type":"text","text":"part 1 \\n "},{"text":"no-whitespace","type":"text"}]}]",
      "ai.response.avgCompletionTokensPerSecond": Infinity,
      "ai.response.finishReason": "stop",
      "ai.response.id": "id-1",
      "ai.response.model": "mock-model-id",
      "ai.response.msToFinish": 0,
      "ai.response.msToFirstChunk": 0,
      "ai.response.text": "final value keep all whitespace
 end",
      "ai.response.timestamp": "1970-01-01T00:00:01.000Z",
      "ai.result.text": "final value keep all whitespace
 end",
      "ai.stream.msToFirstChunk": 0,
      "ai.usage.completionTokens": 2,
      "ai.usage.promptTokens": 3,
      "gen_ai.request.model": "mock-model-id",
      "gen_ai.response.finish_reasons": [
        "stop",
      ],
      "gen_ai.response.id": "id-1",
      "gen_ai.response.model": "mock-model-id",
      "gen_ai.system": "mock-provider",
      "gen_ai.usage.input_tokens": 3,
      "gen_ai.usage.output_tokens": 2,
      "operation.name": "ai.streamText.doStream",
    },
    "events": [
      {
        "attributes": {
          "ai.response.msToFirstChunk": 0,
          "ai.stream.msToFirstChunk": 0,
        },
        "name": "ai.stream.firstChunk",
      },
      {
        "attributes": undefined,
        "name": "ai.stream.finish",
      },
    ],
    "name": "ai.streamText.doStream",
  },
]
`;

exports[`options.maxSteps > 3 steps: initial, continue, continue > value promises > result.steps should contain all steps 1`] = `
[
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "length",
    "isContinued": true,
    "logprobs": undefined,
    "rawResponse": undefined,
    "response": {
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "stepType": "initial",
    "text": "part 1 
 ",
    "toolCalls": [],
    "toolResults": [],
    "usage": {
      "completionTokens": 20,
      "promptTokens": 10,
      "totalTokens": 30,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "length",
    "isContinued": true,
    "logprobs": undefined,
    "rawResponse": undefined,
    "response": {
      "id": "id-1",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:01.000Z,
    },
    "stepType": "continue",
    "text": "no-whitespace",
    "toolCalls": [],
    "toolResults": [],
    "usage": {
      "completionTokens": 5,
      "promptTokens": 30,
      "totalTokens": 35,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "rawResponse": {
      "headers": {
        "call": "3",
      },
    },
    "response": {
      "id": "id-1",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:01.000Z,
    },
    "stepType": "continue",
    "text": "final value keep all whitespace
 end",
    "toolCalls": [],
    "toolResults": [],
    "usage": {
      "completionTokens": 2,
      "promptTokens": 3,
      "totalTokens": 5,
    },
    "warnings": undefined,
  },
]
`;

exports[`options.onFinish > options.onFinish should send correct information 1`] = `
{
  "experimental_providerMetadata": {
    "testProvider": {
      "testKey": "testValue",
    },
  },
  "finishReason": "stop",
  "logprobs": undefined,
  "rawResponse": {
    "headers": {
      "call": "2",
    },
  },
  "response": {
    "headers": {
      "call": "2",
    },
    "id": "id-0",
    "modelId": "mock-model-id",
    "timestamp": 1970-01-01T00:00:00.000Z,
  },
  "responseMessages": [
    {
      "content": [
        {
          "text": "Hello, world!",
          "type": "text",
        },
        {
          "args": {
            "value": "value",
          },
          "toolCallId": "call-1",
          "toolName": "tool1",
          "type": "tool-call",
        },
      ],
      "role": "assistant",
    },
    {
      "content": [
        {
          "result": "value-result",
          "toolCallId": "call-1",
          "toolName": "tool1",
          "type": "tool-result",
        },
      ],
      "role": "tool",
    },
  ],
  "steps": [
    {
      "experimental_providerMetadata": {
        "testProvider": {
          "testKey": "testValue",
        },
      },
      "finishReason": "stop",
      "isContinued": false,
      "logprobs": undefined,
      "rawResponse": {
        "headers": {
          "call": "2",
        },
      },
      "response": {
        "id": "id-0",
        "modelId": "mock-model-id",
        "timestamp": 1970-01-01T00:00:00.000Z,
      },
      "stepType": "initial",
      "text": "Hello, world!",
      "toolCalls": [
        {
          "args": {
            "value": "value",
          },
          "toolCallId": "call-1",
          "toolName": "tool1",
          "type": "tool-call",
        },
      ],
      "toolResults": [
        {
          "args": {
            "value": "value",
          },
          "result": "value-result",
          "toolCallId": "call-1",
          "toolName": "tool1",
          "type": "tool-result",
        },
      ],
      "usage": {
        "completionTokens": 10,
        "promptTokens": 3,
        "totalTokens": 13,
      },
      "warnings": undefined,
    },
  ],
  "text": "Hello, world!",
  "toolCalls": [
    {
      "args": {
        "value": "value",
      },
      "toolCallId": "call-1",
      "toolName": "tool1",
      "type": "tool-call",
    },
  ],
  "toolResults": [
    {
      "args": {
        "value": "value",
      },
      "result": "value-result",
      "toolCallId": "call-1",
      "toolName": "tool1",
      "type": "tool-result",
    },
  ],
  "usage": {
    "completionTokens": 10,
    "promptTokens": 3,
    "totalTokens": 13,
  },
  "warnings": undefined,
}
`;

exports[`result.fullStream > should filter out empty text deltas 1`] = `
[
  {
    "textDelta": "Hello",
    "type": "text-delta",
  },
  {
    "textDelta": ", ",
    "type": "text-delta",
  },
  {
    "textDelta": "world!",
    "type": "text-delta",
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "response": {
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "logprobs": undefined,
    "response": {
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
  },
]
`;

exports[`result.fullStream > should not send tool call deltas when toolCallStreaming is disabled 1`] = `
[
  {
    "args": {
      "value": "Sparkle Day",
    },
    "toolCallId": "call_O17Uplv4lJvD6DVdIvFFeRMw",
    "toolName": "test-tool",
    "type": "tool-call",
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "tool-calls",
    "isContinued": false,
    "logprobs": undefined,
    "response": {
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 17,
      "promptTokens": 53,
      "totalTokens": 70,
    },
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "tool-calls",
    "logprobs": undefined,
    "response": {
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "finish",
    "usage": {
      "completionTokens": 17,
      "promptTokens": 53,
      "totalTokens": 70,
    },
  },
]
`;

exports[`result.fullStream > should send delayed asynchronous tool results 1`] = `
[
  {
    "args": {
      "value": "value",
    },
    "toolCallId": "call-1",
    "toolName": "tool1",
    "type": "tool-call",
  },
  {
    "args": {
      "value": "value",
    },
    "result": "value-result",
    "toolCallId": "call-1",
    "toolName": "tool1",
    "type": "tool-result",
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "response": {
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "logprobs": undefined,
    "response": {
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
  },
]
`;

exports[`result.fullStream > should send text deltas 1`] = `
[
  {
    "textDelta": "Hello",
    "type": "text-delta",
  },
  {
    "textDelta": ", ",
    "type": "text-delta",
  },
  {
    "textDelta": "world!",
    "type": "text-delta",
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "response": {
      "id": "response-id",
      "modelId": "response-model-id",
      "timestamp": 1970-01-01T00:00:05.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "logprobs": undefined,
    "response": {
      "id": "response-id",
      "modelId": "response-model-id",
      "timestamp": 1970-01-01T00:00:05.000Z,
    },
    "type": "finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
  },
]
`;

exports[`result.fullStream > should send tool call deltas when toolCallStreaming is enabled 1`] = `
[
  {
    "toolCallId": "call_O17Uplv4lJvD6DVdIvFFeRMw",
    "toolName": "test-tool",
    "type": "tool-call-streaming-start",
  },
  {
    "argsTextDelta": "{"",
    "toolCallId": "call_O17Uplv4lJvD6DVdIvFFeRMw",
    "toolName": "test-tool",
    "type": "tool-call-delta",
  },
  {
    "argsTextDelta": "value",
    "toolCallId": "call_O17Uplv4lJvD6DVdIvFFeRMw",
    "toolName": "test-tool",
    "type": "tool-call-delta",
  },
  {
    "argsTextDelta": "":"",
    "toolCallId": "call_O17Uplv4lJvD6DVdIvFFeRMw",
    "toolName": "test-tool",
    "type": "tool-call-delta",
  },
  {
    "argsTextDelta": "Spark",
    "toolCallId": "call_O17Uplv4lJvD6DVdIvFFeRMw",
    "toolName": "test-tool",
    "type": "tool-call-delta",
  },
  {
    "argsTextDelta": "le",
    "toolCallId": "call_O17Uplv4lJvD6DVdIvFFeRMw",
    "toolName": "test-tool",
    "type": "tool-call-delta",
  },
  {
    "argsTextDelta": " Day",
    "toolCallId": "call_O17Uplv4lJvD6DVdIvFFeRMw",
    "toolName": "test-tool",
    "type": "tool-call-delta",
  },
  {
    "argsTextDelta": ""}",
    "toolCallId": "call_O17Uplv4lJvD6DVdIvFFeRMw",
    "toolName": "test-tool",
    "type": "tool-call-delta",
  },
  {
    "args": {
      "value": "Sparkle Day",
    },
    "toolCallId": "call_O17Uplv4lJvD6DVdIvFFeRMw",
    "toolName": "test-tool",
    "type": "tool-call",
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "tool-calls",
    "isContinued": false,
    "logprobs": undefined,
    "response": {
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 17,
      "promptTokens": 53,
      "totalTokens": 70,
    },
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "tool-calls",
    "logprobs": undefined,
    "response": {
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "finish",
    "usage": {
      "completionTokens": 17,
      "promptTokens": 53,
      "totalTokens": 70,
    },
  },
]
`;

exports[`result.fullStream > should send tool calls 1`] = `
[
  {
    "args": {
      "value": "value",
    },
    "toolCallId": "call-1",
    "toolName": "tool1",
    "type": "tool-call",
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "response": {
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "logprobs": undefined,
    "response": {
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
  },
]
`;

exports[`result.fullStream > should send tool results 1`] = `
[
  {
    "args": {
      "value": "value",
    },
    "toolCallId": "call-1",
    "toolName": "tool1",
    "type": "tool-call",
  },
  {
    "args": {
      "value": "value",
    },
    "result": "value-result",
    "toolCallId": "call-1",
    "toolName": "tool1",
    "type": "tool-result",
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "response": {
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "logprobs": undefined,
    "response": {
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
  },
]
`;

exports[`result.fullStream > should use fallback response metadata when response metadata is not provided 1`] = `
[
  {
    "textDelta": "Hello",
    "type": "text-delta",
  },
  {
    "textDelta": ", ",
    "type": "text-delta",
  },
  {
    "textDelta": "world!",
    "type": "text-delta",
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "response": {
      "id": "id-2000",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:02.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "logprobs": undefined,
    "response": {
      "id": "id-2000",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:02.000Z,
    },
    "type": "finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
  },
]
`;

exports[`result.pipeDataStreamToResponse > should create a Response with a data stream and custom headers 1`] = `
[
  "0:"Hello"
",
  "0:", "
",
  "0:"world!"
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
  "d:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10}}
",
]
`;

exports[`result.pipeDataStreamToResponse > should mask error messages by default 1`] = `
[
  "3:""
",
  "e:{"finishReason":"error","usage":{"promptTokens":0,"completionTokens":0},"isContinued":false}
",
  "d:{"finishReason":"error","usage":{"promptTokens":0,"completionTokens":0}}
",
]
`;

exports[`result.pipeDataStreamToResponse > should support custom error messages 1`] = `
[
  "3:"custom error message: error"
",
  "e:{"finishReason":"error","usage":{"promptTokens":0,"completionTokens":0},"isContinued":false}
",
  "d:{"finishReason":"error","usage":{"promptTokens":0,"completionTokens":0}}
",
]
`;

exports[`result.pipeDataStreamToResponse > should support merging with existing stream data 1`] = `
[
  "2:["stream-data-value"]
",
  "0:"Hello"
",
  "0:", "
",
  "0:"world!"
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
  "d:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10}}
",
]
`;

exports[`result.pipeDataStreamToResponse > should suppress usage information when sendUsage is false 1`] = `
[
  "0:"Hello, World!"
",
  "e:{"finishReason":"stop","isContinued":false}
",
  "d:{"finishReason":"stop"}
",
]
`;

exports[`result.pipeDataStreamToResponse > should write data stream parts to a Node.js response-like object 1`] = `
[
  "0:"Hello"
",
  "0:", "
",
  "0:"world!"
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
  "d:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10}}
",
]
`;

exports[`result.responseMessages > should contain assistant response message and tool message when there are tool calls with results 1`] = `
[
  {
    "content": [
      {
        "text": "Hello, world!",
        "type": "text",
      },
      {
        "args": {
          "value": "value",
        },
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-call",
      },
    ],
    "role": "assistant",
  },
  {
    "content": [
      {
        "result": "result1",
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-result",
      },
    ],
    "role": "tool",
  },
]
`;

exports[`result.responseMessages > should contain assistant response message when there are no tool calls 1`] = `
[
  {
    "content": [
      {
        "text": "Hello, world!",
        "type": "text",
      },
    ],
    "role": "assistant",
  },
]
`;

exports[`result.toAIStream > should transform textStream through callbacks and data transformers 1`] = `
[
  "0:"Hello"
",
  "0:", "
",
  "0:"world!"
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
  "d:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10}}
",
]
`;

exports[`result.toDataStream > should create a data stream 1`] = `
[
  "0:"Hello"
",
  "0:", "
",
  "0:"world!"
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
  "d:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10}}
",
]
`;

exports[`result.toDataStream > should mask error messages by default 1`] = `
[
  "3:""
",
  "e:{"finishReason":"error","usage":{"promptTokens":0,"completionTokens":0},"isContinued":false}
",
  "d:{"finishReason":"error","usage":{"promptTokens":0,"completionTokens":0}}
",
]
`;

exports[`result.toDataStream > should send tool call and tool result stream parts 1`] = `
[
  "9:{"toolCallId":"call-1","toolName":"tool1","args":{"value":"value"}}
",
  "a:{"toolCallId":"call-1","result":"value-result"}
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
  "d:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10}}
",
]
`;

exports[`result.toDataStream > should send tool call, tool call stream start, tool call deltas, and tool result stream parts when tool call delta flag is enabled 1`] = `
[
  "b:{"toolCallId":"call-1","toolName":"tool1"}
",
  "c:{"toolCallId":"call-1","argsTextDelta":"{ \\"value\\":"}
",
  "c:{"toolCallId":"call-1","argsTextDelta":" \\"value\\" }"}
",
  "9:{"toolCallId":"call-1","toolName":"tool1","args":{"value":"value"}}
",
  "a:{"toolCallId":"call-1","result":"value-result"}
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
  "d:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10}}
",
]
`;

exports[`result.toDataStream > should support custom error messages 1`] = `
[
  "3:"custom error message: error"
",
  "e:{"finishReason":"error","usage":{"promptTokens":0,"completionTokens":0},"isContinued":false}
",
  "d:{"finishReason":"error","usage":{"promptTokens":0,"completionTokens":0}}
",
]
`;

exports[`result.toDataStream > should support merging with existing stream data 1`] = `
[
  "2:["stream-data-value"]
",
  "0:"Hello"
",
  "0:", "
",
  "0:"world!"
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
  "d:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10}}
",
]
`;

exports[`result.toDataStream > should suppress usage information when sendUsage is false 1`] = `
[
  "0:"Hello, World!"
",
  "e:{"finishReason":"stop","isContinued":false}
",
  "d:{"finishReason":"stop"}
",
]
`;

exports[`result.toDataStreamResponse > should create a Response with a data stream 1`] = `
[
  "0:"Hello"
",
  "0:", "
",
  "0:"world!"
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
  "d:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10}}
",
]
`;

exports[`result.toDataStreamResponse > should create a Response with a data stream and custom headers 1`] = `
[
  "0:"Hello"
",
  "0:", "
",
  "0:"world!"
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
  "d:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10}}
",
]
`;

exports[`result.toDataStreamResponse > should mask error messages by default 1`] = `
[
  "3:""
",
  "e:{"finishReason":"error","usage":{"promptTokens":0,"completionTokens":0},"isContinued":false}
",
  "d:{"finishReason":"error","usage":{"promptTokens":0,"completionTokens":0}}
",
]
`;

exports[`result.toDataStreamResponse > should support custom error messages 1`] = `
[
  "3:"custom error message: error"
",
  "e:{"finishReason":"error","usage":{"promptTokens":0,"completionTokens":0},"isContinued":false}
",
  "d:{"finishReason":"error","usage":{"promptTokens":0,"completionTokens":0}}
",
]
`;

exports[`result.toDataStreamResponse > should support merging with existing stream data 1`] = `
[
  "2:["stream-data-value"]
",
  "0:"Hello"
",
  "0:", "
",
  "0:"world!"
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
  "d:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10}}
",
]
`;

exports[`result.toDataStreamResponse > should suppress usage information when sendUsage is false 1`] = `
[
  "0:"Hello, World!"
",
  "e:{"finishReason":"stop","isContinued":false}
",
  "d:{"finishReason":"stop"}
",
]
`;

exports[`telemetry > should not record any telemetry data when not explicitly enabled 1`] = `[]`;

exports[`telemetry > should not record telemetry inputs / outputs when disabled 1`] = `
[
  {
    "attributes": {
      "ai.finishReason": "stop",
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.streamText",
      "ai.response.finishReason": "stop",
      "ai.settings.maxSteps": 1,
      "ai.usage.completionTokens": 20,
      "ai.usage.promptTokens": 10,
      "operation.name": "ai.streamText",
    },
    "events": [],
    "name": "ai.streamText",
  },
  {
    "attributes": {
      "ai.finishReason": "stop",
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.streamText.doStream",
      "ai.response.avgCompletionTokensPerSecond": 40,
      "ai.response.finishReason": "stop",
      "ai.response.id": "id-0",
      "ai.response.model": "mock-model-id",
      "ai.response.msToFinish": 500,
      "ai.response.msToFirstChunk": 100,
      "ai.response.timestamp": "1970-01-01T00:00:00.000Z",
      "ai.stream.msToFirstChunk": 100,
      "ai.usage.completionTokens": 20,
      "ai.usage.promptTokens": 10,
      "gen_ai.request.model": "mock-model-id",
      "gen_ai.response.finish_reasons": [
        "stop",
      ],
      "gen_ai.response.id": "id-0",
      "gen_ai.response.model": "mock-model-id",
      "gen_ai.system": "mock-provider",
      "gen_ai.usage.input_tokens": 10,
      "gen_ai.usage.output_tokens": 20,
      "operation.name": "ai.streamText.doStream",
    },
    "events": [
      {
        "attributes": {
          "ai.response.msToFirstChunk": 100,
          "ai.stream.msToFirstChunk": 100,
        },
        "name": "ai.stream.firstChunk",
      },
      {
        "attributes": undefined,
        "name": "ai.stream.finish",
      },
    ],
    "name": "ai.streamText.doStream",
  },
  {
    "attributes": {
      "ai.operationId": "ai.toolCall",
      "ai.toolCall.id": "call-1",
      "ai.toolCall.name": "tool1",
      "operation.name": "ai.toolCall",
    },
    "events": [],
    "name": "ai.toolCall",
  },
]
`;

exports[`telemetry > should record successful tool call 1`] = `
[
  {
    "attributes": {
      "ai.finishReason": "stop",
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.streamText",
      "ai.prompt": "{"prompt":"test-input"}",
      "ai.response.finishReason": "stop",
      "ai.response.text": "",
      "ai.response.toolCalls": "[{"type":"tool-call","toolCallId":"call-1","toolName":"tool1","args":{"value":"value"}}]",
      "ai.result.text": "",
      "ai.result.toolCalls": "[{"type":"tool-call","toolCallId":"call-1","toolName":"tool1","args":{"value":"value"}}]",
      "ai.settings.maxSteps": 1,
      "ai.usage.completionTokens": 20,
      "ai.usage.promptTokens": 10,
      "operation.name": "ai.streamText",
    },
    "events": [],
    "name": "ai.streamText",
  },
  {
    "attributes": {
      "ai.finishReason": "stop",
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.streamText.doStream",
      "ai.prompt.format": "prompt",
      "ai.prompt.messages": "[{"role":"user","content":[{"type":"text","text":"test-input"}]}]",
      "ai.response.avgCompletionTokensPerSecond": 40,
      "ai.response.finishReason": "stop",
      "ai.response.id": "id-0",
      "ai.response.model": "mock-model-id",
      "ai.response.msToFinish": 500,
      "ai.response.msToFirstChunk": 100,
      "ai.response.text": "",
      "ai.response.timestamp": "1970-01-01T00:00:00.000Z",
      "ai.response.toolCalls": "[{"type":"tool-call","toolCallId":"call-1","toolName":"tool1","args":{"value":"value"}}]",
      "ai.result.text": "",
      "ai.result.toolCalls": "[{"type":"tool-call","toolCallId":"call-1","toolName":"tool1","args":{"value":"value"}}]",
      "ai.stream.msToFirstChunk": 100,
      "ai.usage.completionTokens": 20,
      "ai.usage.promptTokens": 10,
      "gen_ai.request.model": "mock-model-id",
      "gen_ai.response.finish_reasons": [
        "stop",
      ],
      "gen_ai.response.id": "id-0",
      "gen_ai.response.model": "mock-model-id",
      "gen_ai.system": "mock-provider",
      "gen_ai.usage.input_tokens": 10,
      "gen_ai.usage.output_tokens": 20,
      "operation.name": "ai.streamText.doStream",
    },
    "events": [
      {
        "attributes": {
          "ai.response.msToFirstChunk": 100,
          "ai.stream.msToFirstChunk": 100,
        },
        "name": "ai.stream.firstChunk",
      },
      {
        "attributes": undefined,
        "name": "ai.stream.finish",
      },
    ],
    "name": "ai.streamText.doStream",
  },
  {
    "attributes": {
      "ai.operationId": "ai.toolCall",
      "ai.toolCall.args": "{"value":"value"}",
      "ai.toolCall.id": "call-1",
      "ai.toolCall.name": "tool1",
      "ai.toolCall.result": ""value-result"",
      "operation.name": "ai.toolCall",
    },
    "events": [],
    "name": "ai.toolCall",
  },
]
`;

exports[`telemetry > should record telemetry data when enabled 1`] = `
[
  {
    "attributes": {
      "ai.finishReason": "stop",
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.streamText",
      "ai.prompt": "{"prompt":"test-input"}",
      "ai.request.headers.header1": "value1",
      "ai.request.headers.header2": "value2",
      "ai.response.finishReason": "stop",
      "ai.response.text": "Hello, world!",
      "ai.result.text": "Hello, world!",
      "ai.settings.frequencyPenalty": 0.3,
      "ai.settings.maxSteps": 1,
      "ai.settings.presencePenalty": 0.4,
      "ai.settings.stopSequences": [
        "stop",
      ],
      "ai.settings.temperature": 0.5,
      "ai.settings.topK": 0.1,
      "ai.settings.topP": 0.2,
      "ai.telemetry.functionId": "test-function-id",
      "ai.telemetry.metadata.test1": "value1",
      "ai.telemetry.metadata.test2": false,
      "ai.usage.completionTokens": 20,
      "ai.usage.promptTokens": 10,
      "operation.name": "ai.streamText test-function-id",
      "resource.name": "test-function-id",
    },
    "events": [],
    "name": "ai.streamText",
  },
  {
    "attributes": {
      "ai.finishReason": "stop",
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.streamText.doStream",
      "ai.prompt.format": "prompt",
      "ai.prompt.messages": "[{"role":"user","content":[{"type":"text","text":"test-input"}]}]",
      "ai.request.headers.header1": "value1",
      "ai.request.headers.header2": "value2",
      "ai.response.avgCompletionTokensPerSecond": 40,
      "ai.response.finishReason": "stop",
      "ai.response.id": "id-0",
      "ai.response.model": "mock-model-id",
      "ai.response.msToFinish": 500,
      "ai.response.msToFirstChunk": 100,
      "ai.response.text": "Hello, world!",
      "ai.response.timestamp": "1970-01-01T00:00:00.000Z",
      "ai.result.text": "Hello, world!",
      "ai.settings.frequencyPenalty": 0.3,
      "ai.settings.presencePenalty": 0.4,
      "ai.settings.stopSequences": [
        "stop",
      ],
      "ai.settings.temperature": 0.5,
      "ai.settings.topK": 0.1,
      "ai.settings.topP": 0.2,
      "ai.stream.msToFirstChunk": 100,
      "ai.telemetry.functionId": "test-function-id",
      "ai.telemetry.metadata.test1": "value1",
      "ai.telemetry.metadata.test2": false,
      "ai.usage.completionTokens": 20,
      "ai.usage.promptTokens": 10,
      "gen_ai.request.frequency_penalty": 0.3,
      "gen_ai.request.model": "mock-model-id",
      "gen_ai.request.presence_penalty": 0.4,
      "gen_ai.request.stop_sequences": [
        "stop",
      ],
      "gen_ai.request.temperature": 0.5,
      "gen_ai.request.top_k": 0.1,
      "gen_ai.request.top_p": 0.2,
      "gen_ai.response.finish_reasons": [
        "stop",
      ],
      "gen_ai.response.id": "id-0",
      "gen_ai.response.model": "mock-model-id",
      "gen_ai.system": "mock-provider",
      "gen_ai.usage.input_tokens": 10,
      "gen_ai.usage.output_tokens": 20,
      "operation.name": "ai.streamText.doStream test-function-id",
      "resource.name": "test-function-id",
    },
    "events": [
      {
        "attributes": {
          "ai.response.msToFirstChunk": 100,
          "ai.stream.msToFirstChunk": 100,
        },
        "name": "ai.stream.firstChunk",
      },
      {
        "attributes": undefined,
        "name": "ai.stream.finish",
      },
    ],
    "name": "ai.streamText.doStream",
  },
]
`;

exports[`tools with custom schema > should send tool calls 1`] = `
[
  {
    "args": {
      "value": "value",
    },
    "toolCallId": "call-1",
    "toolName": "tool1",
    "type": "tool-call",
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "response": {
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "logprobs": undefined,
    "response": {
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
  },
]
`;
