// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`telemetry > should not record any telemetry data when not explicitly enabled 1`] = `[]`;

exports[`telemetry > should not record telemetry inputs / outputs when disabled 1`] = `
[
  {
    "attributes": {
      "ai.finishReason": "stop",
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.generateText",
      "ai.response.finishReason": "stop",
      "ai.settings.maxToolRoundtrips": 0,
      "ai.usage.completionTokens": 20,
      "ai.usage.promptTokens": 10,
      "operation.name": "ai.generateText",
    },
    "events": [],
    "name": "ai.generateText",
  },
  {
    "attributes": {
      "ai.finishReason": "stop",
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.generateText.doGenerate",
      "ai.response.finishReason": "stop",
      "ai.usage.completionTokens": 20,
      "ai.usage.promptTokens": 10,
      "gen_ai.request.model": "mock-model-id",
      "gen_ai.response.finish_reasons": [
        "stop",
      ],
      "gen_ai.system": "mock-provider",
      "gen_ai.usage.input_tokens": 10,
      "gen_ai.usage.output_tokens": 20,
      "operation.name": "ai.generateText.doGenerate",
    },
    "events": [],
    "name": "ai.generateText.doGenerate",
  },
  {
    "attributes": {
      "ai.operationId": "ai.toolCall",
      "ai.toolCall.id": "call-1",
      "ai.toolCall.name": "tool1",
      "operation.name": "ai.toolCall",
    },
    "events": [],
    "name": "ai.toolCall",
  },
]
`;

exports[`telemetry > should record successful tool call 1`] = `
[
  {
    "attributes": {
      "ai.finishReason": "stop",
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.generateText",
      "ai.prompt": "{"prompt":"test-input"}",
      "ai.response.finishReason": "stop",
      "ai.response.toolCalls": "[{"toolCallType":"function","toolCallId":"call-1","toolName":"tool1","args":"{ \\"value\\": \\"value\\" }"}]",
      "ai.result.toolCalls": "[{"toolCallType":"function","toolCallId":"call-1","toolName":"tool1","args":"{ \\"value\\": \\"value\\" }"}]",
      "ai.settings.maxToolRoundtrips": 0,
      "ai.usage.completionTokens": 20,
      "ai.usage.promptTokens": 10,
      "operation.name": "ai.generateText",
    },
    "events": [],
    "name": "ai.generateText",
  },
  {
    "attributes": {
      "ai.finishReason": "stop",
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.generateText.doGenerate",
      "ai.prompt.format": "prompt",
      "ai.prompt.messages": "[{"role":"user","content":[{"type":"text","text":"test-input"}]}]",
      "ai.response.finishReason": "stop",
      "ai.response.toolCalls": "[{"toolCallType":"function","toolCallId":"call-1","toolName":"tool1","args":"{ \\"value\\": \\"value\\" }"}]",
      "ai.result.toolCalls": "[{"toolCallType":"function","toolCallId":"call-1","toolName":"tool1","args":"{ \\"value\\": \\"value\\" }"}]",
      "ai.usage.completionTokens": 20,
      "ai.usage.promptTokens": 10,
      "gen_ai.request.model": "mock-model-id",
      "gen_ai.response.finish_reasons": [
        "stop",
      ],
      "gen_ai.system": "mock-provider",
      "gen_ai.usage.input_tokens": 10,
      "gen_ai.usage.output_tokens": 20,
      "operation.name": "ai.generateText.doGenerate",
    },
    "events": [],
    "name": "ai.generateText.doGenerate",
  },
  {
    "attributes": {
      "ai.operationId": "ai.toolCall",
      "ai.toolCall.args": "{"value":"value"}",
      "ai.toolCall.id": "call-1",
      "ai.toolCall.name": "tool1",
      "ai.toolCall.result": ""result1"",
      "operation.name": "ai.toolCall",
    },
    "events": [],
    "name": "ai.toolCall",
  },
]
`;

exports[`telemetry > should record telemetry data when enabled 1`] = `
[
  {
    "attributes": {
      "ai.finishReason": "stop",
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.generateText",
      "ai.prompt": "{"prompt":"prompt"}",
      "ai.request.headers.header1": "value1",
      "ai.request.headers.header2": "value2",
      "ai.response.finishReason": "stop",
      "ai.response.text": "Hello, world!",
      "ai.result.text": "Hello, world!",
      "ai.settings.frequencyPenalty": 0.3,
      "ai.settings.maxToolRoundtrips": 0,
      "ai.settings.presencePenalty": 0.4,
      "ai.settings.stopSequences": [
        "stop",
      ],
      "ai.settings.temperature": 0.5,
      "ai.settings.topK": 0.1,
      "ai.settings.topP": 0.2,
      "ai.telemetry.functionId": "test-function-id",
      "ai.telemetry.metadata.test1": "value1",
      "ai.telemetry.metadata.test2": false,
      "ai.usage.completionTokens": 20,
      "ai.usage.promptTokens": 10,
      "operation.name": "ai.generateText test-function-id",
      "resource.name": "test-function-id",
    },
    "events": [],
    "name": "ai.generateText",
  },
  {
    "attributes": {
      "ai.finishReason": "stop",
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.generateText.doGenerate",
      "ai.prompt.format": "prompt",
      "ai.prompt.messages": "[{"role":"user","content":[{"type":"text","text":"prompt"}]}]",
      "ai.request.headers.header1": "value1",
      "ai.request.headers.header2": "value2",
      "ai.response.finishReason": "stop",
      "ai.response.text": "Hello, world!",
      "ai.result.text": "Hello, world!",
      "ai.settings.frequencyPenalty": 0.3,
      "ai.settings.presencePenalty": 0.4,
      "ai.settings.stopSequences": [
        "stop",
      ],
      "ai.settings.temperature": 0.5,
      "ai.settings.topK": 0.1,
      "ai.settings.topP": 0.2,
      "ai.telemetry.functionId": "test-function-id",
      "ai.telemetry.metadata.test1": "value1",
      "ai.telemetry.metadata.test2": false,
      "ai.usage.completionTokens": 20,
      "ai.usage.promptTokens": 10,
      "gen_ai.request.frequency_penalty": 0.3,
      "gen_ai.request.model": "mock-model-id",
      "gen_ai.request.presence_penalty": 0.4,
      "gen_ai.request.stop_sequences": [
        "stop",
      ],
      "gen_ai.request.temperature": 0.5,
      "gen_ai.request.top_k": 0.1,
      "gen_ai.request.top_p": 0.2,
      "gen_ai.response.finish_reasons": [
        "stop",
      ],
      "gen_ai.system": "mock-provider",
      "gen_ai.usage.input_tokens": 10,
      "gen_ai.usage.output_tokens": 20,
      "operation.name": "ai.generateText.doGenerate test-function-id",
      "resource.name": "test-function-id",
    },
    "events": [],
    "name": "ai.generateText.doGenerate",
  },
]
`;
